{% extends "base.html" %}

{% block title %}Robotics Academy - All Students{% endblock %}

{% block page_title %}All Students{% endblock %}

{% block page_subtitle %}Manage all registered students{% endblock %}

{% block content %}

<!-- Import Status Message -->
{% if import_summary %}
<div class="mb-6 p-4 rounded-lg
    {% if import_errors %}
        bg-yellow-50 border border-yellow-300 text-yellow-800
    {% else %}
        bg-green-50 border border-green-300 text-green-800
    {% endif %}" role="alert">
    <div class="flex">
        <div class="flex-shrink-0">
            <i class="fas {% if import_errors %}fa-exclamation-triangle{% else %}fa-check-circle{% endif %} mt-0.5"></i>
        </div>
        <div class="ml-3">
            <h3 class="text-sm font-medium">{{ import_summary }}</h3>
            {% if import_errors %}
            <div class="mt-2 text-sm">
                <ul role="list" class="list-disc pl-5 space-y-1">
                    {% for error in import_errors %}
                    <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endif %}
<!-- End Import Status Message -->

<!-- Header Actions -->
<div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 md:mb-8 gap-4">
    <div>
        <button onclick="showImportStudentsModal()"
                class="bg-white text-gray-700 px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors text-sm font-medium flex items-center disabled:opacity-50 disabled:cursor-not-allowed">
            <i class="fas fa-file-upload mr-2"></i>Import Students
        </button>
    </div>
    <div class="flex space-x-3 w-full md:w-auto justify-end">
        <button onclick="window.location.href='{{ url_for('dashboard') }}'"
                class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors text-sm font-medium flex items-center">
            <i class="fas fa-arrow-left mr-2"></i>Back
        </button>
        <button onclick="showAddStudentModal()"
                class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium flex items-center disabled:opacity-50 disabled:cursor-not-allowed">
            <i class="fas fa-user-plus mr-2"></i>Add Student
        </button>
    </div>
</div>

<!-- Search and Filters -->
<div class="bg-white rounded-xl shadow-md border border-gray-100 p-4 md:p-5 mb-6 md:mb-8">
    <!-- Updated grid layout for more filters -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4 items-center">
        <!-- Search -->
        <div class="lg:col-span-2">
            <div class="relative">
                <input type="text"
                       id="searchInput"
                       placeholder="Search name, email, UID..."
                       class="w-full p-2.5 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                       aria-label="Search students by name, email, or UID">
                <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
            </div>
        </div>
        <!-- Grade Filter -->
        <div>
            <select id="gradeFilter" class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm" aria-label="Filter by grade">
                <option value="all">All Grades</option>
                {# Assumes app.py provides available_grades list #}
                {% for grade in available_grades | sort %}
                <option value="{{ grade }}">{{ grade }}</option>
                {% else %}
                 <option value="" disabled>No grades found</option> {# Indicate if list is empty #}
                {% endfor %}
            </select>
        </div>
        <!-- Section Filter -->
        <div>
            <select id="sectionFilter" class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm" aria-label="Filter by section">
                <option value="all">All Sections</option>
                 {# Assumes app.py provides available_sections list (uses 'sections' variable name from previous context) #}
                {% for section in sections | sort %}
                <option value="{{ section }}">{{ section }}</option>
                 {% else %}
                 <option value="" disabled>No sections found</option> {# Indicate if list is empty #}
                {% endfor %}
            </select>
        </div>
        <!-- Campus Filter (Updated with specific options) -->
         <div>
            <select id="campusFilter" class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm" aria-label="Filter by campus">
                <option value="all">All Campuses</option>
                {# Statically list desired campuses #}
                <option value="Yamuna Campus">Yamuna Campus</option>
                <option value="Subhash Nagar Campus">Subhash Nagar Campus</option>
                 {# You might still need app.py to pass available_campuses if you want this dynamic later #}
                {# {% for campus in available_campuses | sort %} #}
                {# <option value="{{ campus }}">{{ campus }}</option> #}
                {# {% endfor %} #}
            </select>
        </div>
        <!-- Status Filter -->
        <div>
            <select id="statusFilter" class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm" aria-label="Filter by status">
                <option value="all">All Statuses</option>
                <option value="Excellent">Excellent (90+)</option>
                <option value="Good">Good (70-89)</option>
                <option value="Needs Help">Needs Help (60-69)</option>
                <option value="At Risk">At Risk (<60)</option>
                <option value="N/A">N/A</option>
                <option value="Invalid">Invalid Grade</option>
            </select>
        </div>
    </div>
</div>

<!-- Bulk Actions Bar (Ensure IDs match script.js) -->
<div id="bulkActionContainer" class="hidden bg-blue-100 border border-blue-300 rounded-xl shadow-md p-3 mb-4 flex justify-between items-center transition-all duration-300 ease-in-out">
    <div>
        <!-- Ensure ID matches script.js -->
        <span id="selectedCountText" class="text-sm font-semibold text-blue-800">0 students selected</span>
    </div>
     <!-- Ensure ID matches script.js -->
    <button id="deleteSelectedButton" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors text-sm font-medium flex items-center disabled:opacity-50 disabled:cursor-not-allowed">
        <i class="fas fa-trash-alt mr-2"></i>Delete Selected
    </button>
</div>

<!-- Student Table -->
<div class="bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden">
    <div class="overflow-x-auto">
        <table class="min-w-full">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-4 py-3 text-left">
                         <!-- Ensure ID matches script.js -->
                        <input type="checkbox" id="selectAllCheckbox" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" aria-label="Select all students">
                    </th>
                    <th class="px-4 md:px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Student</th>
                    <th class="px-4 md:px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Class</th>
                    <th class="px-4 md:px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider hidden md:table-cell">UID</th>
                    <th class="px-4 md:px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider hidden lg:table-cell">Roll No</th>
                    <th class="px-4 md:px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Grade</th>
                    <th class="px-4 md:px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Status</th>
                    <th class="px-4 md:px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200" id="studentTableBody">
                {% for student in students %}
                 <!-- Added data-grade-name, data-section-name, data-campus-name -->
                 <!-- Ensure these data attributes are populated correctly by app.py -->
                <tr class="hover:bg-gray-50 transition-colors duration-150 student-row"
                    data-student-id="{{ student.id }}"
                    data-name="{{ student.name|lower }}"
                    data-status="{{ student.status }}"
                    data-grade="{{ student.overallGrade|default(-1)|int }}"
                    data-class-id="{{ student.classId }}" {# Keep classId if needed elsewhere #}
                    data-grade-name="{{ student.gradeName|lower|default('unknown') }}" {# Assumes student object has gradeName, add default #}
                    data-section-name="{{ student.sectionName|lower|default('unknown') }}" {# Assumes student object has sectionName, add default #}
                    data-campus-name="{{ student.campusName|lower|default('unknown') }}" {# Assumes student object has campusName, add default #}
                    data-email="{{ student.email|lower }}"
                    data-uid="{{ student.uid|lower }}">
                    <td class="px-4 py-3 whitespace-nowrap">
                         <!-- Ensure class matches script.js -->
                        <input type="checkbox" name="student_id" value="{{ student.id }}" class="student-checkbox h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" aria-label="Select student {{ student.name }}">
                    </td>
                    <td class="px-4 md:px-6 py-3 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full flex items-center justify-center mr-3 flex-shrink-0 bg-gray-200">
                                <span class="text-sm font-medium text-gray-600">{{ student.name[0] | upper if student.name else '?' }}</span>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-gray-900 truncate">{{ student.name }}</p>
                                <p class="text-xs text-gray-500 truncate hidden sm:block">{{ student.email }}</p>
                            </div>
                        </div>
                    </td>
                    <!-- Display combined class name still -->
                    <td class="px-4 md:px-6 py-3 text-xs text-gray-500 whitespace-nowrap">{{ student.className or 'Unassigned' }}</td>
                    <td class="px-4 md:px-6 py-3 text-sm text-gray-600 whitespace-nowrap hidden md:table-cell">{{ student.uid or '-' }}</td>
                    <td class="px-4 md:px-6 py-3 text-sm text-gray-600 whitespace-nowrap hidden lg:table-cell">{{ student.rollNumber or '-' }}</td>
                    <td class="px-4 md:px-6 py-3 whitespace-nowrap">
                        <div class="flex items-center">
                            <input type="number"
                                   value="{{ student.overallGrade }}"
                                   min="0" max="100"
                                   class="w-16 border border-gray-300 rounded px-2 py-1 text-sm grade-input focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                                   data-student-id="{{ student.id }}"
                                   onchange="updateGrade('{{ student.id }}', this.value, event)"
                                   aria-label="Grade for {{ student.name }}">
                            <span class="text-xs text-gray-500 ml-1">%</span>
                        </div>
                    </td>
                    <td class="px-4 md:px-6 py-3 whitespace-nowrap status-cell">
                        {% set status_text = student.status or 'N/A' %}
                        {% set status_classes = 'bg-gray-100 text-gray-800' %}
                        {% if status_text == 'Excellent' %}{% set status_classes = 'bg-green-100 text-green-800' %}
                        {% elif status_text == 'Good' %}{% set status_classes = 'bg-blue-100 text-blue-800' %}
                        {% elif status_text == 'Needs Help' %}{% set status_classes = 'bg-yellow-100 text-yellow-800' %}
                        {% elif status_text == 'At Risk' %}{% set status_classes = 'bg-red-100 text-red-800' %}
                        {% endif %}
                        <span class="px-2.5 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full {{ status_classes }} status-badge">
                            {{ status_text }}
                        </span>
                    </td>
                    <td class="px-4 md:px-6 py-3 whitespace-nowrap">
                        <a href="{{ url_for('student_profile', student_id=student.id) }}"
                           class="text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors">
                            View Profile
                        </a>
                    </td>
                </tr>
                {% else %}
                <tr><td colspan="8" class="text-center py-10 px-6 text-gray-500"><i class="fas fa-users text-3xl mb-3 text-gray-300"></i><br>No students found.</td></tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<!-- Add Student Modal -->
<div id="addStudentModal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50 p-4 transition-opacity duration-300 ease-out opacity-0" aria-labelledby="addStudentModalTitle" role="dialog" aria-modal="true">
    <div class="bg-white rounded-xl shadow-xl max-w-lg w-full transform transition-transform duration-300 ease-out scale-95 opacity-0 flex flex-col max-h-[90vh]" id="addStudentDialog">
        <form id="addStudentForm" class="flex flex-col flex-1 overflow-hidden">
            <!-- Header -->
            <div class="flex justify-between items-center p-5 border-b border-gray-200">
                <h3 class="text-xl font-semibold text-gray-800" id="addStudentModalTitle">Add New Student</h3>
                <button type="button" onclick="closeAddStudentModal()" class="text-gray-400 hover:text-gray-600 transition-colors" aria-label="Close add student modal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <!-- Content (Scrollable) -->
            <div class="p-6 flex-1 overflow-y-auto space-y-4">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label for="studentName" class="block text-sm font-medium text-gray-700 mb-1">Full Name *</label>
                        <input type="text" id="studentName" name="name" required
                               class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                               aria-required="true">
                    </div>
                    <div>
                        <label for="studentEmail" class="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                        <input type="email" id="studentEmail" name="email" required
                               class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                               aria-required="true">
                    </div>
                </div>

                <!-- NEW: UID and Roll Number -->
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label for="studentUid" class="block text-sm font-medium text-gray-700 mb-1">UID *</label>
                        <input type="text" id="studentUid" name="uid" required
                               placeholder="e.g., KYC041JO"
                               class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                               aria-required="true">
                    </div>
                    <div>
                        <label for="studentRollNumber" class="block text-sm font-medium text-gray-700 mb-1">Roll Number *</label>
                        <input type="text" id="studentRollNumber" name="rollNumber" required
                               placeholder="e.g., ROLL101"
                               class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                               aria-required="true">
                    </div>
                </div>

                <div class="relative">
                    <label for="studentClass" class="block text-sm font-medium text-gray-700 mb-1">Class *</label>
                    <select id="studentClass" name="classId" required
                            class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                            aria-required="true">
                        <option value="" disabled selected>Select a class...</option>
                        {# This list still needs to be populated dynamically via app.py or JS #}
                        {% for cls in all_classes | sort(attribute='name') %}
                        <option value="{{ cls.id }}">{{ cls.name }} - {{ cls.section }} ({{ cls.campus }})</option>
                        {% endfor %}
                    </select>
                    <span id="studentClassLoading" class="hidden absolute right-3 top-10 text-gray-400">
                        <i class="fas fa-spinner fa-spin"></i>
                    </span>
                </div>

                <!-- Campus Dropdown (Updated) -->
                <div>
                    <label for="studentCampus" class="block text-sm font-medium text-gray-700 mb-1">Campus *</label>
                    <select id="studentCampus" name="campus" required
                            class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                            aria-required="true">
                        <option value="" disabled selected>Select a campus...</option>
                        <option value="Yamuna Campus">Yamuna Campus</option>
                        <option value="Subhash Nagar Campus">Subhash Nagar Campus</option>
                        {# Removed Main Campus option #}
                    </select>
                </div>

                <div>
                    <label for="studentParentPhone" class="block text-sm font-medium text-gray-700 mb-1">Parent Phone</label>
                    <input type="tel" id="studentParentPhone" name="parentPhone"
                           placeholder="+91 XXXXXXXXXX"
                           class="w-full p-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                           aria-describedby="phoneFormatHint">
                    <p id="phoneFormatHint" class="text-xs text-gray-500 mt-1">Format: +91 XXXXXXXXXX</p>
                </div>

                <!-- REMOVED Skills text box -->

                <p class="text-xs text-gray-500 mt-4">* Required fields</p>
            </div>

            <!-- Footer -->
            <div class="flex justify-end space-x-3 px-6 py-4 bg-gray-50 border-t border-gray-200 rounded-b-xl flex-shrink-0">
                <button type="button" onclick="closeAddStudentModal()"
                        class="px-5 py-2 border border-gray-300 rounded-lg text-sm text-gray-700 hover:bg-gray-100 transition-colors">
                    Cancel
                </button>
                <button type="submit"
                        class="px-5 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors inline-flex items-center disabled:opacity-50 disabled:cursor-not-allowed">
                    <i class="fas fa-user-plus mr-2"></i>
                    <span>Add Student</span>
                    <i class="fas fa-spinner fa-spin ml-2 hidden" id="addStudentLoading"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Import Students Modal -->
<div id="importStudentsModal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50 p-4 transition-opacity duration-300 ease-out opacity-0" aria-labelledby="importStudentsModalTitle" role="dialog" aria-modal="true">
    <div class="bg-white rounded-xl shadow-xl max-w-2xl w-full transform transition-transform duration-300 ease-out scale-95 opacity-0" id="importStudentsDialog">
        <form id="importStudentsForm"
              {# Removed action and method, will be handled by JS #}
              enctype="multipart/form-data">
            <div class="p-6">
                <div class="flex justify-between items-center mb-5">
                    <h3 class="text-xl font-semibold text-gray-800" id="importStudentsModalTitle">Import Students via CSV</h3>
                    <button type="button" onclick="closeImportStudentsModal()" class="text-gray-400 hover:text-gray-600 transition-colors" aria-label="Close import students modal">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <div class="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <h4 class="font-semibold text-blue-800 mb-2">Step 1: Download Template</h4>
                        <p class="text-sm text-blue-700 mb-3">Download the template CSV and fill it with student data. Ensure 'Class Name' and 'Section' match existing classes exactly (case-insensitive). Use unique UIDs and emails.</p>
                        <a href="{{ url_for('export_student_template') }}"
                           class="inline-flex items-center px-4 py-2 bg-white text-blue-700 border border-blue-300 rounded-lg text-sm font-medium hover:bg-blue-50 transition-colors">
                            <i class="fas fa-download mr-2"></i>Download Template
                        </a>
                    </div>
                    <div class="p-4 bg-green-50 border border-green-200 rounded-lg">
                        <h4 class="font-semibold text-green-800 mb-2">Step 2: Upload Completed File</h4>
                        <p class="text-sm text-green-700 mb-3">Upload the completed CSV. The system checks for duplicate UIDs and emails. Invalid rows will be skipped.</p>
                        <div>
                            <label for="studentCsvFile" class="block text-sm font-medium text-gray-700 mb-1">CSV File *</label>

                            <label class="w-full flex items-center px-4 py-2 bg-white border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                                <i class="fas fa-file-csv text-green-600 mr-3 text-lg"></i>
                                <span id="csvFileName" class="text-sm text-gray-400">No file chosen</span>
                                <input type="file" id="studentCsvFile" name="student_csv" required accept=".csv, text/csv" class="hidden"
                                       aria-required="true">
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex justify-end space-x-3 px-6 py-4 bg-gray-50 border-t border-gray-200 rounded-b-xl">
                <button type="button" onclick="closeImportStudentsModal()"
                        class="px-5 py-2 border border-gray-300 rounded-lg text-sm text-gray-700 hover:bg-gray-100 transition-colors">
                    Cancel
                </button>
                <button type="submit"
                        class="px-5 py-2 bg-green-600 text-white rounded-lg text-sm hover:bg-green-700 transition-colors inline-flex items-center disabled:opacity-50 disabled:cursor-not-allowed">
                    <i class="fas fa-file-upload mr-2"></i>
                    <span>Upload and Import</span>
                    <i class="fas fa-spinner fa-spin ml-2 hidden" id="importStudentsLoading"></i>
                </button>
            </div>
        </form>
    </div>
</div>

{% endblock %}

{% block scripts %}
<script>
    // Utility function for debouncing
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    document.addEventListener('DOMContentLoaded', function() {
        // --- Elements ---
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        // New filter elements
        const gradeFilter = document.getElementById('gradeFilter');
        const sectionFilter = document.getElementById('sectionFilter');
        const campusFilter = document.getElementById('campusFilter');
        const studentRows = document.querySelectorAll('.student-row');

        // --- Note: Modal Listeners (add/import) are now handled by global script.js ---
        // --- Bulk action listeners are also handled by global script.js ---

        // --- Filtering Logic ---
        function filterAndSortStudents() {
            const searchTerm = searchInput ? searchInput.value.toLowerCase().trim() : '';
            const statusValue = statusFilter ? statusFilter.value : 'all';
            // Read from new filters
            const gradeValue = gradeFilter ? gradeFilter.value : 'all';
            const sectionValue = sectionFilter ? sectionFilter.value : 'all';
            const campusValue = campusFilter ? campusFilter.value : 'all';

            let visibleCount = 0;
            studentRows.forEach(row => {
                const name = row.dataset.name || '';
                const email = row.dataset.email || '';
                const uid = row.dataset.uid || '';
                const status = row.dataset.status || 'N/A';
                // Read new data attributes
                const gradeName = row.dataset.gradeName || '';
                const sectionName = row.dataset.sectionName || '';
                const campusName = row.dataset.campusName || '';

                const matchesSearch = searchTerm === '' ||
                                      name.includes(searchTerm) ||
                                      email.includes(searchTerm) ||
                                      uid.includes(searchTerm);
                const matchesStatus = statusValue === 'all' || status === statusValue;
                // Check against new filters
                // Ensure case-insensitive comparison for filters
                const matchesGrade = gradeValue === 'all' || gradeName === gradeValue.toLowerCase();
                const matchesSection = sectionValue === 'all' || sectionName === sectionValue.toLowerCase();
                const matchesCampus = campusValue === 'all' || campusName === campusValue.toLowerCase();


                // Combine all matches
                const isVisible = matchesSearch && matchesStatus && matchesGrade && matchesSection && matchesCampus;
                row.style.display = isVisible ? '' : 'none';
                if (isVisible) visibleCount++;
            });
            // Update UI if no students are visible
            const noStudentsRow = document.querySelector('#studentTableBody tr:not(.student-row)');
            if (noStudentsRow) {
                noStudentsRow.style.display = visibleCount === 0 ? '' : 'none';
            }
        }

        // Attach filter event listeners
        if (searchInput) searchInput.addEventListener('input', debounce(filterAndSortStudents, 300));
        if (statusFilter) statusFilter.addEventListener('change', filterAndSortStudents);
        // Add listeners for new filters
        if (gradeFilter) gradeFilter.addEventListener('change', filterAndSortStudents);
        if (sectionFilter) sectionFilter.addEventListener('change', filterAndSortStudents);
        if (campusFilter) campusFilter.addEventListener('change', filterAndSortStudents);

        // Initialize filtering on page load
        filterAndSortStudents();

        // --- Removed JS functions to refresh filters ---
        // Filters are now populated by Jinja on page load based on data from app.py
        // Ensure app.py passes available_grades, sections, and available_campuses
        // And ensure student objects have gradeName, sectionName, campusName
    });
</script>
{% endblock %}

